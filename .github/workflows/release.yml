name: Build & Release

on:
  push:
    tags:
      - 'v*.*.*'   # 仅在推送形如 v1.2.3 的标签时触发

permissions:
  contents: write   # 允许创建 Release

jobs:
  build:
    name: Build binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows]
        goarch: [amd64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Set build variables
        run: |
          echo "BUILD_TIME=$(date -u '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV

      - name: Compile (${{ matrix.goos }}-${{ matrix.goarch }})
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          BINARY_NAME=DDBOT-${{ matrix.goos }}-${{ matrix.goarch }}
          if [ "$GOOS" = "windows" ]; then BINARY_NAME+='.exe'; fi
          go build -ldflags "-X 'github.com/cnxysoft/DDBOT-WSa/lsp.BuildTime=${{ env.BUILD_TIME }}' -X 'github.com/cnxysoft/DDBOT-WSa/lsp.CommitId=${{ github.sha }}'" -o $BINARY_NAME ./cmd
          echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ddbot-${{ matrix.goos }}-${{ matrix.goarch }}
          path: ${{ env.BINARY_NAME }}

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
      - name: Display downloaded files
        run: ls -R dist

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: false
          files: |
            dist/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 